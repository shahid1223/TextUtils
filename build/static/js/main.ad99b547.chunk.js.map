{"version":3,"sources":["Components/About.js","Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","className","id","type","Alert","props","role","alert","Navbar","mode","to","title","about","onClick","toggleMOde","htmlFor","defaultProps","TextForm","useState","text","setText","reptext","setReptext","repfrom","setRepfrom","textchar","setTextchar","srch","setSrch","unicode","setUnicode","style","color","heading","rows","value","onChange","event","console","log","target","neWText","toUpperCase","lowertext","toLowerCase","texttrim","trim","extraspace","split","join","document","getElementById","select","navigator","clipboard","writeText","newtext","replace","placeholder","index","charAt","searchedtxt","search","newUnicode","charCodeAt","length","App","setMode","body","backgroundColor","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ad99b547.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className=\"container\">\r\n            {/* <Navbar title=\"TextUtils\" about=\"About Us\" /> */}\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n\r\n                {/* <button type=\"button\" class=\"btn btn-primary my-3\">Enable dark Mode</button> */}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n            {props.alert}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;","\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\" >Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMOde} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"set title here\",\r\n    about: \"set about here \"\r\n}\r\nexport default Navbar;","import React, { useState } from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    // const wordcount = text.split(\" \").length()\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On Chnage\")\r\n        setText(event.target.value)\r\n    }\r\n    const Touppercase = () => {\r\n        console.log(\"To Uppercase clicked \" + text)\r\n        let neWText = text.toUpperCase()\r\n        setText(neWText)\r\n    }\r\n    const Tolowercase = () => {\r\n        console.log(\"To  LOw\")\r\n        let lowertext = text.toLowerCase()\r\n        setText(lowertext)\r\n    }\r\n    const Trim = () => {\r\n        console.log(\"Trim is clicked\")\r\n        let texttrim = text.trim()\r\n        setText(texttrim)\r\n    }\r\n    const clear = () => {\r\n        console.log(\"Clear\")\r\n        setText('')\r\n        setReptext('')\r\n        setRepfrom('')\r\n        setTextchar('')\r\n        setSrch('')\r\n        setUnicode('')\r\n\r\n    }\r\n    const [text, setText] = useState('Enter Text Here');\r\n    const [reptext, setReptext] = useState('')\r\n    const handlerep = (event) => {\r\n        setReptext(event.target.value)\r\n    }\r\n    const Replace = () => {\r\n        console.log(\"Replace Clicked\")\r\n        let newtext = text.replace(reptext, repfrom)\r\n        setText(newtext + \" \")\r\n    }\r\n\r\n    const [repfrom, setRepfrom] = useState('')\r\n    const handlefrom = (event) => {\r\n        setRepfrom(event.target.value)\r\n    }\r\n\r\n    const [textchar, setTextchar] = useState('')\r\n    const charhandle = (event) => {\r\n        // console.log(\"Char Clicked\")\r\n        setTextchar(event.target.value)\r\n    }\r\n\r\n    const charat = () => {\r\n        console.log(\"Char At Clicked\")\r\n        let index = text.charAt(textchar)\r\n        setTextchar(index)\r\n    }\r\n    const [srch, setSrch] = useState('')\r\n    const srchtext = (event) => {\r\n        // console.log(\"Search clicked\")\r\n        setSrch(event.target.value)\r\n    }\r\n    const search = () => {\r\n        console.log(\"seach clicked\")\r\n        let searchedtxt = text.search(srch)\r\n        setSrch(searchedtxt)\r\n    }\r\n\r\n    const [unicode, setUnicode] = useState('')\r\n    const unicodetext = (event) => {\r\n        setUnicode(event.target.value)\r\n    }\r\n    const ganrateUnicode = () => {\r\n        console.log(\"Unicode clicked\")\r\n        let newUnicode = unicode.charCodeAt()\r\n        setUnicode(newUnicode)\r\n    }\r\n\r\n    const hnadlecopy = () => {\r\n        console.log(\"I am Copy\")\r\n        let text = document.getElementById(\"myBox\")\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n    }\r\n\r\n    const handleExtraspace = () => {\r\n        let extraspace = text.split(/[ ]+/)\r\n        setText(extraspace.join(\" \"))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h1 style={{ color: props.mode === 'light' ? 'black' : 'white' }}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"10\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'light' ? 'white' : 'black' }, { color: props.mode === 'light' ? 'black' : 'black' }}></textarea>\r\n                    <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick={Touppercase}>Convert to Uppercase</button>\r\n                    <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick={Tolowercase}>Convert to lowercase</button>\r\n                    <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick={Trim}>Trim</button>\r\n                    <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick={handleExtraspace}>Remove Extra Space</button>\r\n                    <button type=\"button\" className=\"btn btn-success my-3 mx-2\" onClick={hnadlecopy}>Copy Text</button>\r\n                    <button type=\"button\" className=\"btn btn-danger my-3 mx-2\" onClick={clear}>Clear</button>\r\n                    <div className=\"input-group\">\r\n                        <span className=\"input-group-text\" onClick={Replace}>REPLACE</span>\r\n                        <input placeholder=\"Enter the word you want to repalce\" value={reptext} onChange={handlerep} type=\"text\" aria-label=\"First name\" className=\"form-control\" />\r\n                        <input placeholder=\"Enter the Word you want to replace from\" value={repfrom} onChange={handlefrom} type=\"text\" aria-label=\"Last name\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"input-group my-3\">\r\n                        <span className=\"input-group-text\" onClick={charat}>Charecter At</span>\r\n                        <input placeholder=\"Enter the word you want to repalce\" value={textchar} onChange={charhandle} type=\"text\" aria-label=\"First name\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"d-flex\">\r\n                        <button className=\"btn btn-outline-success \" onClick={search} >Search</button>\r\n                        <input className=\"form-control me-2 mx-3\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={srch} onChange={srchtext} />\r\n                    </div>\r\n                    <div className=\"d-flex my-3\">\r\n                        <button className=\"btn btn-outline-success \" onClick={ganrateUnicode} >Unicode</button>\r\n                        <input className=\"form-control me-2 mx-3\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={unicode} onChange={unicodetext} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1>Your text summary </h1>\r\n                <p>{text.split(\" \").length} words and {text.length}</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                <h1>Preview</h1>\r\n                <p>{text.length > 0 ? text : \"Enter something to preview it\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\nimport React, { useState } from 'react'\nimport './App.css';\nimport About from './Components/About';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const toggleMOde = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#212529'\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" about=\"About Us\" mode={mode} toggleMOde={toggleMOde} />\n        <Alert alert=\"Wellcome To Textutils\" />\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm heading=\"Enter Your Text To Analyze\" mode={mode} />\n\n          </Route>\n        </Switch>\n      </Router>\n      {/* <div className=\"container my-5\"> */}\n      {/* <About /> */}\n      {/* </div> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}